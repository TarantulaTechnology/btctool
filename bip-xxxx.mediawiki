<pre>
  BIP: xxxx
  Title: Shamir's Secret Sharing Scheme
  Author: Matt Whitlock <bip@mattwhitlock.name>,
          Nikita Schmidt,
          Jan Møller,
	  Jérôme Rousselot
  Status: Draft
  Type: Informational
  Created: 28-03-2014
</pre>

== Abstract ==

A method is described for decomposing an arbitrary secret (for example, a Bitcoin private key, a [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32] extended private key, or anything else) into shares in a manner such that the secret can be recovered from any sufficiently large subset of the shares but such that any smaller subset does not reveal any information about the secret. This method is commonly known as Shamir's Secret Sharing Scheme, or M of N secret sharing.
Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.

== Copyright ==

This proposal is hereby placed in the public domain.

== Specification ==

* Define ''K'' as the secret, which is a sequence of bytes.
* Define ''L'' as the length of the secret, in bytes.
* Define ''N'': 1 ≤ ''N'' ≤ 16 as the total number of shares requested.
* Define ''M'': 1 ≤ ''M'' ≤ N as the number of shares to be required when recovering the secret.
* Define '''GF''' as the finite field of order 2<sup>8</sup>, i.e. the field of equivalence classes of <!--
  --> polynomials whose coefficients belong to GF(2).  These polynomials are represented as bytes where <!--
  --> a more significant bit is a coefficient at a higher degree.  The modulus is the polynomial <!--
  --> ''x''<sup>8</sup>+''x''<sup>4</sup>+''x''<sup>3</sup>+''x''<sup>2</sup>+1, or 0x11d.
* Define '''GF'''<sup>''L''</sup> as the ''L''-dimensional vector space over '''GF''', whose elements are <!--
  --> represented as byte sequences of length ''L''.
* Define Hash<sub>''w''</sub>(''m'') as a function that:
*# accepts an argument ''m'', which is a sequence of bytes,
*# computes the [http://en.wikipedia.org/wiki/SHA-2 SHA-256] message digest of the SHA-256 message digest of ''m'',
*# and returns the first ''w'' bytes of the resulting digest.

=== Derivation of Shares from Secret ===

# Compute ''a''<sub>0</sub>, ''a''<sub>1</sub>, …, ''a''<sub>''M''-1</sub> &isin; '''GF'''<sup>''L''</sup> <!--
  --> such that ''a''<sub>0</sub> = ''K'' and all ''a''<sub>''j''</sub> are unpredictable to anyone who <!--
  --> does not know ''K'', but knows Hash<sub>2</sub>(''K'') and some parts of ''a''. <br /><!--
  --> Implementations may use random numbers, for example.  If a deterministic algorithm is desired so that <!--
  --> additional shares can be issued which are compatible with the previous shares for the same secret, then <!--
  --> <br/>for each ''i'' from 1 to ''M''-1:
#* let ''a''<sub>''i''</sub> be the first ''L'' bytes of SHA-256(''K'' || ''i'' || 0) || SHA-256(''K'' || ''i'' || 1) || SHA-256(''K'' || ''i'' || 2) || …,<br/>where || denotes concatenation, and numbers ''i'' and 0, 1, 2, … are represented as implementation-defined byte sequences for concatenation (e.g. as single bytes with the corresponding values).
# Let ''y''(''x'') := ''a''<sub>0</sub>·''x''<sup>0</sup> + ''a''<sub>1</sub>·''x''<sup>1</sup> + … <!--
  --> + ''a''<sub>''M''−1</sub>·''x''<sup>''M''−1</sup> in '''GF'''<sup>''L''</sup> <!--
  --> for ''x'' &isin; '''GF''', 1 ≤ ''x'' ≤ 16.
# The shares are the ordered pairs (''x'', ''y''(''x'')).
Note that although mathematically ''x'' can be any non-zero element of '''GF''', i.e. between 1 and 255, our chosen encoding limits it to the maximum of 16.

'''Do not use deterministic coefficients with short secrets.'''  Note that the strength of the deterministic coefficient generation algorithm is the same as the strength of the secret.  When sharing a short secret which is intended as an input to a key extension function of high complexity, such as scrypt, a brute force attack on the coefficients derived from the secret is much faster than an attack on the secret itself, even if the attacker knows only one share.

=== Recovery of Secret from Shares ===

# Let (''x''<sub>''i''</sub>, ''y''(''x''<sub>''i''</sub>)) be any ''M'' distinct shares for 0 ≤ ''i'' &lt; ''M''.
# Let ''n''<sub>''i''</sub> := ''x''<sub>0</sub> · … · ''x''<sub>''i''−1</sub> · ''x''<sub>''i''+1</sub> · … · ''x''<sub>''M''−1</sub> (in '''GF''') for 0 ≤ ''i'' &lt; ''M''.
#* That is, ''n''<sub>''i''</sub> is the product in '''GF''' of all ''x''<sub>''j''</sub> for 0 ≤ ''j'' &lt; ''M'' and ''j'' ≠ ''i''.
# Let ''d''<sub>''i''</sub> := (''x''<sub>0</sub>−''x''<sub>''i''</sub>) · … · (''x''<sub>''i''−1</sub>−''x''<sub>''i''</sub>) · (''x''<sub>''i''+1</sub>−''x''<sub>''i''</sub>) · … · (''x''<sub>''M''−1</sub>−''x''<sub>''i''</sub>) (in '''GF''') for 0 ≤ ''i'' &lt; ''M''.
#* That is, ''d''<sub>''i''</sub> is the product in '''GF''' of all ''x''<sub>''j''</sub>−''x''<sub>''i''</sub> for 0 ≤ ''j'' &lt; ''M'' and ''j'' ≠ ''i''.
# Let ''a''<sub>0</sub> := ''y''(''x''<sub>0</sub>)·''n''<sub>0</sub>·''d''<sub>0</sub><sup>-1</sup> + ''y''(''x''<sub>1</sub>)·''n''<sub>1</sub>·''d''<sub>1</sub><sup>-1</sup> + … + ''y''(''x''<sub>''M''−1</sub>)·''n''<sub>''M''−1</sub>·''d''<sub>''M''−1</sub><sup>-1</sup> (in '''GF'''<sup>''L''</sup>).
# The secret is ''a''<sub>0</sub>.

=== Encoding of Shares ===

# Let ''ID'' be a unique identifier for this set of shares; either
#* two random bytes generated once for all ''N'' shares, or
#* Hash<sub>2</sub>(''K''),<br/>at the implementation's discretion.  Its purpose is to help identify which shares belong together.  The encoding implementation should not use Hash<sub>2</sub>(''K'') if there is any chance that the same secret may be shared again with a different set of coefficients or a different value of ''M'', as that would lead to an intentional collision of ''ID''s of different share sets.  The decoding implementation should treat ''ID'' as random bytes.
# For each share (''x'', ''y''(''x'')), construct a payload as follows:
#* Byte 0 is the ''content type byte'', or ''CTB'', set to 19.
#* Bytes 1 and 2 contain ''ID''.
#* Byte 3 has the value (''M''-1)·16 + (''x''-1).
#* The remaining bytes in the payload are the ''L'' bytes of ''y''(''x'').
# Encode the payload using Base58Check and prefix it with "SSS-".

Content type 19 provides for a universal container of any data represented in Base58Check encoding (such as Bitcoin private key in Wallet Import Format).
The secret (''K'') is the binary form of the decoded Base58Check value excluding the checksum.  Consider for example a Bitcoin private key, which is to be used with a
compressed public key:
<div align="center">''K'' = <code>0x80</code> &lt;private key bytes in big endian order&gt; <code>0x01</code>.</div>

In effect a collection of shares is a wrapper around a Base58Check value, without the overhead of encoding Base58Check twice.

Other types of content can be added in future by allocating different values for the content type byte.

Note the following rules for establishing whether two shares ''A'' and ''B'' may be combinable, i.e. may belong to the same share set:
* if (''CTB'', ''ID'', ''M'', ''L'')<sub>''A''</sub> ≠ (''CTB'', ''ID'', ''M'', ''L'')<sub>''B''</sub>, the shares are not combinable
* if ''x''<sub>''A''</sub> = ''x''<sub>''B''</sub>, but the shares are different, then they are not combinable.

== Motivation ==

Secure longterm backup and storage of secrets is of particular importance to Bitcoin users. So far various techniques have been used including storing plain text private and password encrypted private keys on paper.

Storing plaintext private keys has the obvious drawback that anyone who sees it can steal your funds.

Storing password encrypted private keys has another drawback. You turn your private key into two components, where both are needed to reveal the private key. While you prevent someone getting one component from revealing the private key, you make it more likely that you lose control over your private key yourself. If you lose one component due to flood, theft, or fire, you will have lost control over your private key.

With this BIP we propose to standardize longterm storage of secrets using an M of N secret sharing scheme commonly known as Shamir's Secret Sharing. The secret is split into N shares where any M of those shares reveal the secret. N and M can freely be chosen as long as 1 ≤ M ≤ N ≤ 16. A classic example is to configure M=2 and N=3, meaning that the user splits a secret into 3 shares, and any 2 shares can recombine the secret. This means that if any one share is stolen or lost you can reconstruct the secret by the remaining two shares. On the other hand, an adversary with one share can reveal nothing about the secret. If you choose M=2 and N=2 you have a setting comparable with classic password encrypted private keys, with the added benefit that both components are equally strong.

=== This is not Multi-Sig ===

Bitcoin supports two multi-signature schemes ([https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki BIP11], [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki BIP16]), in which redeeming transaction outputs requires signatures by multiple private keys.

This specification is not a replacement for multi-sig transactions. Rather it provides a secure mechanism for storing and protecting private keys or potentially master seeds, which in turn can be used for multi-signature or classic transactions.

== Rationale ==

It is anticipated that 16 shares will be enough for most applications of Shamir's Secret Sharing Scheme. Thus, ''M'' and ''x'' are allocated 4 bits each.

Each share encodes the content type, which is extensible in future BIPs. So far the content type is limited to Base58, i.e. anything that has a Base58Check encoding specification. Applications supporting this BIP can use conventional Base58 prefix detection to determine how to handle the payload. By supporting Base58 content this specification builds on top of several actual and de facto standards with Bitcoin today, including WIF private keys, BIP32 extended private keys, and BIP38 encrypted private keys.

Each share in a set of compatible shares encode the same random identifier ''ID'' which allows software to guide the user when importing shares. This dramatically reduces the probability of user attempting to combine incompatible shares.

Each share encodes the number ''M'' of shares necessary to combine the secret. This allows software to tell the user how many shares she or he should collect. 

Each share in a set of compatible shares have a unique serial number ''x'' ≤ ''M''. This allows software to guide the user which shares to pick, and prevents counting the same share multiple times.

A common practice is to use the application/version byte (AVB) to both identify the type of payload and force the initial character/s in the Base58Check encoding to a specific prefix, aiding visual recognition of different types of encoded data.  However, the latter is only possible with fixed length payloads.  To preserve both functions of the AVB, this specification proposes to effectively move it outside of the binary payload by attaching the 'SSS-' prefix to the Base58Check encoded string.

An earlier draft of this specification proposed GF(''P'') as the field, where ''P'' was a large prime number close to 2<sup>8''L''</sup>, specified individually for each possible value of ''L''.  In order to support arbitrary length secrets, the field was changed to GF(2<sup>8</sup>).

A timestamp field was discussed, which would be useful to determine the key inception time point to optimize private key import into a wallet.  However, it has no general use in the secret sharing scheme and belongs rather to the payload data.  An encoding that contains inception time, e.g. as [https://bitcointalk.org/index.php?topic=258678.0 proposed by J.-P. Kogelman and W. Yager], can be used as the content payload.

== Reference Implementation ==

[https://github.com/cetuscetus/btctool/blob/bip/bip-sss.py bip-sss.py]

This reference implementation is written with the aim of illustrating the algorithm and encoding scheme.  It is not optimized for any specific purpose nor does it follow any specific software development paradigm.

=== Test Vectors ===

A copy is in [https://github.com/cetuscetus/btctool/blob/bip/bip-test.txt bip-test.txt].

Note: the <code><pre></code> tag appears to be broken, hence the messed-up text below.
<pre>
Secret: (empty)
2 of 2 encoding; share set ID 5df6; share length 15
  Share  1: SSS-4EtJVAbu6g9
  Share  2: SSS-4EtJVHFLUQ7

Secret: 2a
2 of 3 encoding; share set ID ff12; share length 16
  Share  1: SSS-FmEQ1wApUkUA
  Share  2: SSS-FmEQ2TkajyyQ
  Share  3: SSS-FmEQ2yQJjYme

Secret: 0102030405
1 of 1 encoding; share set ID 1234; share length 22
  Share  1: SSS-2b8cxNvVnwSHzDKPr3

Secret: 0102030405
5 of 8 encoding; share set ID 5851; share length 22
  Share  1: SSS-2cTMvHxbT71LzEzbfi
  Share  2: SSS-2cTMvNxxgQ3Hcg1Bab
  Share  3: SSS-2cTMvRAx1uoJ6T9Fz5
  Share  4: SSS-2cTMvSXoCxpjcMFhvb
  Share  5: SSS-2cTMvVpRNubeWKfbKS
  Share  6: SSS-2cTMvaEr6YefknXEV4
  Share  7: SSS-2cTMvdkULmYJVobgaW
  Share  8: SSS-2cTMvh5uxQ4SavKAkh

Private key: 5KG12Hn1g33JEFwdFsbjW4Hzi2fqdsEKZTtcJ3q9L6QFLvL1UJS
Secret: 80be1583452771c1def6789be9ab5086bf3c18dd47aa99d785056ba330bcda7aaf
2 of 3 encoding; share set ID 20ba; share length 60
  Share  1: SSS-5CJkUwdiUPZi2R8RJJzkUFvs1TWC22JAQD2T3QMyhuAvDgzrXKuhT5at
  Share  2: SSS-5CJkUyu8LAq7Newbgpc58SKsuNXvQyxAtnYzVjU1bRhF5hFYyvYaKToq
  Share  3: SSS-5CJkVAkE319sk7FZVnoUgaqge6vmK1bLXwN2mm9d3VgM5hzm6qdh5TrX

Private key: L2AW1Gz2962jcDY5gY1xjuep3fEbkpr3pLody77hUVm3x2MsTBPw
Secret: 809389201df51c18a6c81b1a5525189a20cb58ddcffbd8d28b6b30dcc43a082fb101
4 of 4 encoding; share set ID bf09; share length 61
  Share  1: SSS-L7d2zGTyrAkwk2BESS1ksfA3ejFHhyBrPUp8M3gTgzj6XH7r7rTvEZkks
  Share  2: SSS-L7d2zWZue1HrHVYfbVxoqZYXpfW2W3LN3nySsNSCzHGf1Kzd7UuGyBoKk
  Share  3: SSS-L7d31V9hWyRDRi37KMA8tR6ujJJRVcbvwaANiTNSMykkki8ymQfznBE7E
  Share  4: SSS-L7d32LG8vunr4bPjNkp1gwjZ4MxdgL7MLPpg87irEh4TQShCR5QFshCx2

Secret: 7f34fc0d96fe07c01e28b183a5711805
16 of 16 encoding; share set ID 6b91; share length 37
  Share  1: SSS-2mghkBRhDnYVjuy9JkUN9SMWEQfFeizsE
  Share  2: SSS-2mghkFR2Fm7psBGPYC5EAUSG12QjgytWq
  Share  3: SSS-2mghkHpD5x8D6t1CitLCgNxPzRxna7Dy3
  Share  4: SSS-2mghkQUfD3xh51X8ZKWKG5kfD5UGtB3YW
  Share  5: SSS-2mghkTDKSbL766zz4GDLHiK1LdQR5hQYo
  Share  6: SSS-2mghkUTqvgNqEPVMnVP7eNT5UfJ39GVv2
  Share  7: SSS-2mghkZgCcPUhDY9wagDry9kF32fEkYDdN
  Share  8: SSS-2mghkbtcpPWx6Y2g4k7t8feZ2UX71AAUN
  Share  9: SSS-2mghkhWxkj6oBWvQwXpXQVaDEZzCefrn7
  Share 10: SSS-2mghkmwiADHSYZwokYBMEtkJRm53xUPcH
  Share 11: SSS-2mghkqSiSaiPMp9R81A7yCeojoQnhbkuK
  Share 12: SSS-2mghktFpVoXVKVLLrDVNRryYQwxJEzMKX
  Share 13: SSS-2mghkuYfqfAheZu6ywXfGoFmwxnqw64yw
  Share 14: SSS-2mghkzvNoX6AupKpt9n9PVRMgZ6FPUSLe
  Share 15: SSS-2mghm2UGDwYuVYTSx9YYiYDCzeCmS2XGH
  Share 16: SSS-2mghm6ePLVPJQhsryzUfst9RWochCXK5j

Secret: c71da0d239ee672c76b7ff8dec1c6b1b39b839fd22cde8732f0fa7e70f059ad2
3 of 6 encoding; share set ID a53f; share length 58
  Share  1: SSS-ycigiEv2xRyozNqze5bxgRJZ57wCDEZrU6LJ3v4d2BWQWysFQNZ53D
  Share  2: SSS-ycigjnVFuh8u794S3f3f7EZoRgj2dqCmYpscV5dA8z5wJNB8arsZv6
  Share  3: SSS-ycigoVLiJH82E8kyVkYvWQFxqTN6RDXyDjnKzhpNx4y6nXVTYyQCZF
  Share  4: SSS-ycigq46qLhY1bqnNvd3AASmeFNVuoFn8qZqhCcZZiNysdwRTLu2sYN
  Share  5: SSS-ycigqxtDnEmRpMsaXmnXijcUB4UaLVU8H5FppscnFX81sSFACHYvv6
  Share  6: SSS-ycigsaS8umN5j1d8gXzaGrEysv68oqSopwd1sXA9VsW9FjfWbhJDd9

Secret: ea1bef413e406b7a39280a39bf8ea76b59a4543f3f1797cfb90d33492b3eb57cf05c9cbce61ecff3854028c045049cdf0ba97cd18cbfa76b58481a17ff19ca87
2 of 4 encoding; share set ID e7bc; share length 102
  Share  1: SSS-J3N84hNNoV5ZYcjnWXeRLZ4sJEmGQ7tdUfXxhasAEb2synv2Ygb1p9sW31svpMDrXM7hxYCDTSftZJdb2EtR1gQviu1NJQNV1N
  Share  2: SSS-J3N85PjRCeo4smn5KW7YJNtrrDxGXmrh58NntoxcJtuuS5wA77JycgvLx2DFfkTAbdzMapkHwSE4daS7Drs4a3NLRuNwKopn1T
  Share  3: SSS-J3N85nJxNNCfhVU87qWbh6F7tYDWHM1RpKMy6xYUFJXZA3WZkTjjbwtakws6mbQ5EYW3kddvYPcGeyGz9h3ei6J4jMZ542kwzA
  Share  4: SSS-J3N86LXy38QWEoneDmowUeX4XRycx2uQqT8jT3H4cZLMQJAi1vejjMpJiGiFnY8ahKGQncL7KC8Ko8iWHuYfQmDmfg9QYtzhnf
</pre>
